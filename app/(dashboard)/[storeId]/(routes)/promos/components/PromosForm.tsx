"use client";

import { Promocodes } from "@prisma/client";
import { FC, useState } from "react";
import { CalendarIcon, Trash } from "lucide-react";
import * as z from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { toast } from "react-hot-toast";
import axios from "axios";
import { useParams, useRouter } from "next/navigation";
import { useOrigin } from "@/hooks/use/use-origin";
import AlertModal from "@/components/modals/AlertModal";
import Heading from "@/components/Heading";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { Input } from "@/components/ui/input";
import { MdOutlineSettingsSuggest } from "react-icons/md";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { cn } from "@/lib/utils";
import { format } from "date-fns";
import { Calendar } from "@/components/ui/calendar";

const formSchema = z.object({
  userAccessCode: z.string(),
  discountPercentAmount: z.string(),
  startDate: z.date({
    required_error: "Start Date required",
  }),
  endDate: z.date({
    required_error: "End Date required",
  }),
});

type PromosFormValues = z.infer<typeof formSchema>;

interface PromosFormProps {
  initialData: Promocodes | null;
}

const PromosForm: FC<PromosFormProps> = ({ initialData }) => {
  const origin = useOrigin();
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const params = useParams();
  const router = useRouter();

  const title = initialData ? "Edit promotion" : "Create promotion";
  const description = initialData ? "Edit promotion" : "Add a new promotion";
  const toastMessage = initialData
    ? "Promotion updated"
    : "Added new promotion";
  const action = initialData ? "Save changes" : "Create promotion";

  const form = useForm<PromosFormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      ...initialData,
      startDate:initialData?.startDate,
      endDate:initialData?.endDate,
    } || {
      userAccessCode: "",
      discountPercentAmount: "",
      startDate: "",
      endDate: "",
    },
  });

  function generateRandomString(length: number): string {
    const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    let result = "";

    for (let i = 0; i < length; i++) {
      const randomIndex = Math.floor(Math.random() * characters.length);
      result += characters.charAt(randomIndex);
    }

    return result;
  }

  const handleAutoGeneration = async () => {
    try {
      const autoGeneratedCode = generateRandomString(10);
      form.setValue("userAccessCode", autoGeneratedCode);
    } catch (error) {
      toast.error("Code invalid");
      console.log(error);
    }
  };

  const onSubmit = async (data: PromosFormValues) => {
    try {
      setLoading(true);
      if (initialData) {
        await axios.patch(
          `/api/${params?.storeId}/promos/${params.sizeId}`,
          data
        );
      } else {
        await axios.post(`/api/${params?.storeId}/promos`, data);
      }

      router.refresh();
      router.push(`/${params.storeId}/promos`);
      toast.success(toastMessage);
    } catch (err) {
      toast.error("Something went wrong!");
    } finally {
      setLoading(false);
    }
  };

  const deleteHandler = async () => {
    try {
      setLoading(true);
      await axios.delete(`/api/${params?.storeId}/promos/${params.promoId}`);

      router.refresh();
      router.push(`/${params.storeId}/promos`);
      toast.success("Category deleted successfully");
    } catch (err) {
      toast.error("Make sure you removed all products using this size first!");
    } finally {
      setLoading(false);
      setOpen(false);
    }
  };

  return (
    <>
      <AlertModal
        loading={loading}
        isOpen={open}
        onClose={() => setOpen(false)}
        onConfirm={deleteHandler}
      />
      <div className='flex items-center justify-between'>
        <Heading title={title} description={description} />
        {initialData && (
          <Button
            disabled={loading}
            className='text-white font-bold group h-10 '
            variant='destructive'
            size='sm'
            onClick={() => setOpen(true)}
          >
            <p className='group-hover:w-24 group-hover:text-white transition-all w-0 text-transparent'>
              Delete Promotion
            </p>
            <Trash className='h-4 w-4 ml-2 mr-2' />
          </Button>
        )}
      </div>
      <Separator />
      <Form {...form}>
        <form
          className='space-y-8 w-full'
          onSubmit={form.handleSubmit(onSubmit)}
        >
          <div className='md:grid md:grid-cols-3 flex flex-col gap-y-5 items-left gap-8'>
            <FormField
              control={form.control}
              name='userAccessCode'
              render={({ field }) => (
                <FormItem className=''>
                  <FormLabel className='ml-1 font-semibold'>
                    Access Code for users
                  </FormLabel>
                  <FormControl>
                    <Input
                      disabled={loading}
                      placeholder='XXXXXXXXXX'
                      {...field}
                    />
                  </FormControl>
                  <div
                    onClick={handleAutoGeneration}
                    className='w-full dark:bg-slate-800 dark:text-white py-3 px-5 rounded-md flex items-center justify-center hover:dark:bg-slate-600 hover:bg-slate-200 bg-slate-100 transition cursor-pointer'
                  >
                    <MdOutlineSettingsSuggest size={25} className='' />
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name='discountPercentAmount'
              render={({ field }) => (
                <FormItem>
                  <FormLabel className='ml-1 font-semibold'>
                    Discount Amount {"(%)"}
                  </FormLabel>
                  <FormControl>
                    <Input
                      disabled={loading}
                      placeholder='0.15'
                      type='number'
                      step={0.01}
                      min={0.01}
                      {...field}
                    />
                  </FormControl>

                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name='startDate'
              render={({ field }) => (
                <FormItem className=''>
                  <FormLabel className='ml-1 font-semibold max-md:block md:flex md:flex-col'>
                    Start Date
                  </FormLabel>
                  <Popover>
                    <PopoverTrigger asChild>
                      <FormControl>
                        <Button
                          variant={"outline"}
                          className={cn(
                            "w-[240px] pl-3 text-left font-normal",
                            !field.value && "text-muted-foreground"
                          )}
                        >
                          {field.value ? (
                            format(new Date(field.value), "MMMM do, yyyy")
                          ) : (
                            <span>Pick a date</span>
                          )}
                          <CalendarIcon className='ml-auto h-4 w-4 opacity-50' />
                        </Button>
                      </FormControl>
                    </PopoverTrigger>
                    <PopoverContent className='w-auto p-0' align='start'>
                      <Calendar
                        mode='single'
                        selected={field.value}
                        onSelect={field.onChange}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name='endDate'
              render={({ field }) => (
                <FormItem className=''>
                  <FormLabel className='ml-1 font-semibold max-md:block md:flex md:flex-col'>
                    End Date
                  </FormLabel>
                  <Popover>
                    <PopoverTrigger asChild>
                      <FormControl>
                        <Button
                          variant={"outline"}
                          className={cn(
                            "w-[240px] pl-3 text-left font-normal",
                            !field.value && "text-muted-foreground"
                          )}
                        >
                          {field.value ? (
                            format(new Date(field.value), "MMMM do, yyyy")
                          ) : (
                            <span>Pick a date</span>
                          )}
                          <CalendarIcon className='ml-auto h-4 w-4 opacity-50' />
                        </Button>
                      </FormControl>
                    </PopoverTrigger>
                    <PopoverContent className='w-auto p-0' align='start'>
                      <Calendar
                        mode='single'
                        selected={field.value}
                        onSelect={field.onChange}
                        disabled={(date) =>
                          date < new Date()
                        }
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <Button disabled={loading} className='ml-auto' type='submit'>
            {action}
          </Button>
        </form>
      </Form>
    </>
  );
};
export default PromosForm;
